<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://kszenes.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://kszenes.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-11-28T22:21:13+00:00</updated><id>https://kszenes.github.io/feed.xml</id><title type="html">Kalman Szenes</title><entry><title type="html">Turn Off The Lights</title><link href="https://kszenes.github.io/blog/2024/DarkMode/" rel="alternate" type="text/html" title="Turn Off The Lights"/><published>2024-11-11T00:00:00+00:00</published><updated>2024-11-11T00:00:00+00:00</updated><id>https://kszenes.github.io/blog/2024/DarkMode</id><content type="html" xml:base="https://kszenes.github.io/blog/2024/DarkMode/"><![CDATA[<h1 id="introduction">Introduction</h1> <p>Has years of staring, in a dimly lit room, at a dark mode terminal or text editor made you no longer accustomed to the blinding white pages of most applications? While many programs, such as email readers, come with a good native dark mode, some of the most common file formats including HTML web pages and PDFs are usually displayed using their default white background color.</p> <p>In this blog post, we discuss methods of viewing these file formats with an appearance that is more pleasant on the eye.</p> <h1 id="browser">Browser</h1> <h2 id="web-pages">Web Pages</h2> <p>For the browser, there is a neat extension called <a href="https://darkreader.org/">Dark Reader</a> which dynamically modifies the CSS of the webpage in order to render it in dark mode. The extension is available on both Firefox and Chromium-based web browsers. It also comes with a slew of customization options, ranging from selectively disabling the extension on certain web pages that you would rather render in their native appearance, to custom filters, which determine how the CSS is modified.</p> <p>Below, you can find two examples of the extension in action. It works both on static web pages, such as Wikipedia, and dynamic ones like Google Maps.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blog/wiki-light.png" sizes="95vw"/> <img src="/assets/img/blog/wiki-light.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blog/wiki-dark.png" sizes="95vw"/> <img src="/assets/img/blog/wiki-dark.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blog/gmaps-light.png" sizes="95vw"/> <img src="/assets/img/blog/gmaps-light.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blog/gmaps-dark.png" sizes="95vw"/> <img src="/assets/img/blog/gmaps-dark.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Native web page (left) and dark mode web page using Dark Reader (right) </div> <h2 id="pdfs">PDFs</h2> <p>Note that web browsers often block extensions from functioning on protected URLs, such as configuration pages and local files (e.g., PDFs). Therefore, if you use your web browser as your PDF viewer, you will not be able to rely on Dark Reader for providing a pleasant reading experience.</p> <p>There is, however, a workaround for Firefox users. Create a custom bookmark with a URL given by the following javascript code (adapted from this <a href="https://stackoverflow.com/questions/61814564/how-can-i-enable-dark-mode-when-viewing-a-pdf-file-in-firefox">StackOverflow post</a>):</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>javascript:(function(){var el = typeof viewer !== 'undefined' ? viewer : document.body; el.style.filter = 'invert(1) contrast(75%)';})()
</code></pre></div></div> <p>While viewing a PDF in Firefox, clicking on this bookmark will invert the colors of the PDF and decrease the contrast such that it is lighter on the eyes – effectively performing a poor man’s dark mode.</p> <h1 id="pdf-viewer">PDF viewer</h1> <p>For a better dark mode experience with PDFs, I would recommend using a dedicated PDF viewer which has a native dark mode option. If you are comfortable with Vim motions, there are two great options, the well-established <a href="https://pwmt.org/projects/zathura/">Zathura</a> program and the newer feature-rich <a href="https://sioyek.info/">Sioyek</a> reader, which provide a dark mode out of the box.</p> <blockquote> <p>Note that these PDF readers heavily rely on keyboard shortcuts, in particular Vim motions, and might not be appropriate for novices.</p> </blockquote> <p>While I am content with Sioyek’s default dark mode, the one from Zathura simply inverts the colors which makes for an aggressive appearance since the white background is turned into pitch black. Therefore, I prefer setting the colors to a more tamed dark blue color (similar to the Nord colorscheme). This can be achieved by adding the following configuration to the Zathura config file:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>set default-bg          "#282a36" # Background
set default-fg          "#f8f8f2" # Foreground
set recolor-lightcolor  "#282a36" # Background
set recolor-darkcolor   "#f8f8f2" # Foreground
</code></pre></div></div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blog/pdf-white.png" sizes="95vw"/> <img src="/assets/img/blog/pdf-white.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blog/pdf-black.png" sizes="95vw"/> <img src="/assets/img/blog/pdf-black.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blog/pdf-nord.png" sizes="95vw"/> <img src="/assets/img/blog/pdf-nord.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Example of Zathura dark mode: original PDF (left), native dark mode (middle) and customized dark mode (right) </div> <h1 id="zotero">Zotero</h1> <p>If you spend a lot of time reading academic publications using the <a href="https://www.zotero.org/">Zotero</a> reference manager, you will be happy to hear that it can also be configured with dark mode functionality. The recent release of Zotero 7 now incorporates native support for dark mode. However, similar to the default dark mode of Zathura, it essentially just inverts the colors leading to a harsh visual experience. Thankfully, there is a plugin called <a href="https://github.com/tefkah/zotero-night">zotero-night</a> (compatible with Zotero 6), which provides a much more muted colorscheme and is, therefore, my preferred method of choice.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blog/zotero-light.png" sizes="95vw"/> <img src="/assets/img/blog/zotero-light.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blog/zotero-dark.png" sizes="95vw"/> <img src="/assets/img/blog/zotero-dark.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blog/zotero-7-dark.png" sizes="95vw"/> <img src="/assets/img/blog/zotero-7-dark.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Zotero 6 original PDF (left), Zotero 6 zotero-night extension dark mode (middle), Zotero 7 native dark mode (right) </div>]]></content><author><name></name></author><category term="productivity"/><summary type="html"><![CDATA[How to dark mode everything]]></summary></entry><entry><title type="html">Pimp My `man`</title><link href="https://kszenes.github.io/blog/2024/Manpager/" rel="alternate" type="text/html" title="Pimp My `man`"/><published>2024-10-28T00:00:00+00:00</published><updated>2024-10-28T00:00:00+00:00</updated><id>https://kszenes.github.io/blog/2024/Manpager</id><content type="html" xml:base="https://kszenes.github.io/blog/2024/Manpager/"><![CDATA[<h1 id="introduction">Introduction</h1> <p>This article follows up on my previous blog <a href="/blog/2024/Cheatsheet/">post</a> on improving the experience of digging through the documentation of command line interface tools. In that article, I detailed my preferred method for fetching documentation using the <a href="cheat.sh">cheat.sh</a> website.</p> <p>This method, however, requires an internet connection. What if Microsoft decides to do another automatic software update, during the night, and crashes the worldwide web, again (looking at you <a href="https://en.wikipedia.org/wiki/2024_CrowdStrike-related_IT_outages">CrowdStrike</a>)? This would leave the rest of humanity with only the <code class="language-plaintext highlighter-rouge">man</code> pages to piece together all of human knowledge. Could we not make the experience of interacting with the <code class="language-plaintext highlighter-rouge">man</code> pages a bit more pleasant? That will be the goal of this article.</p> <h1 id="manpager">Manpager</h1> <p>Did you know that you can choose the application that is used for displaying the <code class="language-plaintext highlighter-rouge">man</code> pages? By default, it is set to the <code class="language-plaintext highlighter-rouge">less</code> pager, which doesn’t provide the best user experience due to its lack of proper syntax highlighting. The environment variable <code class="language-plaintext highlighter-rouge">MANPAGER</code> defines the program used for viewing the <code class="language-plaintext highlighter-rouge">man</code> pages.</p> <h2 id="bat"><code class="language-plaintext highlighter-rouge">bat</code></h2> <p>My favorite alternative to <code class="language-plaintext highlighter-rouge">less</code> is the <a href="https://github.com/sharkdp/bat">bat</a> program. It is part of series of common GNU CLI tools that have been rewritten in Rust, and often extended with additional functionality. This list includes <code class="language-plaintext highlighter-rouge">bat</code> as a drop-in replacement for <code class="language-plaintext highlighter-rouge">cat</code> and <code class="language-plaintext highlighter-rouge">less</code>, <a href="https://github.com/sharkdp/fd">fd</a> for <code class="language-plaintext highlighter-rouge">find</code> and <a href="https://github.com/BurntSushi/ripgrep">ripgrep</a> for <code class="language-plaintext highlighter-rouge">grep</code>. <code class="language-plaintext highlighter-rouge">bat</code> provides syntax highlighting for most programming languages and has even replaced <code class="language-plaintext highlighter-rouge">cat</code> and <code class="language-plaintext highlighter-rouge">less</code> for me entirely:</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">alias </span><span class="nv">less</span><span class="o">=</span><span class="s2">"bat"</span>
<span class="nb">alias cat</span><span class="o">=</span><span class="s2">"bat -pp"</span>
</code></pre></div></div> <p>By default, <code class="language-plaintext highlighter-rouge">bat</code> acts like a pager similar to <code class="language-plaintext highlighter-rouge">less</code>. The <code class="language-plaintext highlighter-rouge">-pp</code> flag disables the paging option and prints the entire file, making <code class="language-plaintext highlighter-rouge">bat</code> function exactly like <code class="language-plaintext highlighter-rouge">cat</code>.</p> <p>Moreover, it can be used as the <code class="language-plaintext highlighter-rouge">MANPAGER</code> with the following command taken from their <a href="https://github.com/sharkdp/bat">README</a></p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">MANPAGER</span><span class="o">=</span><span class="s2">"sh -c 'col -bx | bat -l man -p'"</span>
</code></pre></div></div> <p>Check out the results:</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blog/manpager_less_vs_bat.png" sizes="95vw"/> <img src="/assets/img/blog/manpager_less_vs_bat.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> Comparison of less (left) and bat (right) as Manpagers </div> <blockquote> <p>On my Mac, this command worked out of the box. However, on my Linux machine I was encountering formatting issues due to lingering color codes in the output (e.g., <code class="language-plaintext highlighter-rouge">1mgrep</code>). From the <code class="language-plaintext highlighter-rouge">bat</code> documentation, this issue can be resolved by setting the following environment variable <code class="language-plaintext highlighter-rouge">export MANROFFOPT="-c"</code></p> </blockquote> <h2 id="neovim">Neovim</h2> <p>Alternatively, you can use <code class="language-plaintext highlighter-rouge">neovim</code> as your <code class="language-plaintext highlighter-rouge">MANPAGER</code> which will even respect your color scheme</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">MANPAGER</span><span class="o">=</span><span class="s1">'nvim +Man!'</span>
</code></pre></div></div> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blog/manpager_less_vs_nvim.png" sizes="95vw"/> <img src="/assets/img/blog/manpager_less_vs_nvim.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> Comparison of less (left) and neovim (right) as Manpagers </div> <p>However, since it also loads all of your plugins (unless you were diligent in setting up lazy loading of packages), it will necessarily be a bit slower than <code class="language-plaintext highlighter-rouge">bat</code>, which is why I use it instead.</p> <h1 id="source">Source</h1> <p>I was made aware of the <code class="language-plaintext highlighter-rouge">MANPAGER</code> environment variable by this <a href="https://www.youtube.com/watch?v=ab3rY0X5kD4">video</a> from DistroTube. Go check him out, he makes great Linux related content!</p>]]></content><author><name></name></author><category term="productivity,"/><category term="microtip"/><summary type="html"><![CDATA[Replace the default `man` pager with something with a bit more bling]]></summary></entry><entry><title type="html">Convenient Online Cheat Sheets</title><link href="https://kszenes.github.io/blog/2024/Cheatsheet/" rel="alternate" type="text/html" title="Convenient Online Cheat Sheets"/><published>2024-10-21T00:00:00+00:00</published><updated>2024-10-21T00:00:00+00:00</updated><id>https://kszenes.github.io/blog/2024/Cheatsheet</id><content type="html" xml:base="https://kszenes.github.io/blog/2024/Cheatsheet/"><![CDATA[<h1 id="introduction">Introduction</h1> <p>Do you often find yourself forgetting common flags for command line interface (CLI) tools? Do you wonder if there are certain use cases of terminal utilities that you, perhaps, haven’t even thought of? While most programs contain extensive documentation in their <code class="language-plaintext highlighter-rouge">man</code> pages, I think that it is fair to say that this format is not always the easiest to navigate and can be quite dense.</p> <h1 id="cheatsh">cheat.sh</h1> <p>In comes <a href="https://www.cht.sh">cheat.sh</a> (or <code class="language-plaintext highlighter-rouge">cht.sh</code> for short), a website that hosts a community-driven set of cheat sheets for most programming languages, tools and utilities. The best part is that it is designed to work seamlessly from the terminal using the <code class="language-plaintext highlighter-rouge">curl</code> command which is available on most systems by default, so all you really need is an internet connection. The <code class="language-plaintext highlighter-rouge">cht.sh</code> homepage serves as a tutorial on how to use the repository and exposes its capabilities:</p> <div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ curl cht.sh
      _                _         _    __
  ___| |__   ___  __ _| |_   ___| |__ \ \      The only cheat sheet you need
 / __| '_ \ / _ \/ _` | __| / __| '_ \ \ \     Unified access to the best
| (__| | | |  __/ (_| | |_ _\__ \ | | |/ /     community driven documentation
 \___|_| |_|\___|\__,_|\__(_)___/_| |_/_/      repositories of the world

+------------------------+ +------------------------+ +------------------------+
| $ curl cheat.sh/ls     | | $ cht.sh btrfs         | | $ cht.sh lua/:learn    |
| $ curl cht.sh/btrfs    | | $ cht.sh tar~list      | | Learn any* programming |
| $ curl cht.sh/tar~list | |                        | | language not leaving   |
| $ curl https://cht.sh  | |                        | | your shell             |
|                        | |                        | | *) any of 60           |
|                        | |                        | |                        |
+-- queries with curl ---+ +- own optional client --+ +- learn, learn, learn! -+
+------------------------+ +------------------------+ +------------------------+
| $ cht.sh go/f&lt;tab&gt;&lt;tab&gt;| | $ cht.sh --shell       | | $ cht.sh go zip lists  |
| go/for   go/func       | | cht.sh&gt; help           | | Ask any question using |
| $ cht.sh go/for        | | ...                    | | cht.sh or curl cht.sh: |
| ...                    | |                        | | /go/zip+lists          |
|                        | |                        | | (use /,+ when curling) |
|                        | |                        | |                        |
+---- TAB-completion ----+ +-- interactive shell ---+ +- programming questions-+
+------------------------+ +------------------------+ +------------------------+
| $ curl cht.sh/:help    | | $ vim prg.py           | | $ time curl cht.sh/    |
| see /:help and /:intro | | ...                    | | ...                    |
| for usage information  | | zip lists _            | | real    0m0.075s       |
| and README.md on GitHub| | &lt;leader&gt;KK             | |                        |
| for the details        | |             *awesome*  | |                        |
|            *start here*| |                        | |                        |
+--- self-documented ----+ +- queries from editor! -+ +---- instant answers ---+

[Follow @igor_chubin for updates][github.com/chubin/cheat.sh]
</code></pre></div></div> <h2 id="example-with-grep">Example with <code class="language-plaintext highlighter-rouge">grep</code></h2> <p>For instance, if you want to see which flag to pass to <code class="language-plaintext highlighter-rouge">grep</code> in order to filter all lines in a file that <strong>don’t contain</strong> a specific search query, you could consult the cheat sheet for <code class="language-plaintext highlighter-rouge">grep</code>:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>curl cht.sh/grep
<span class="c"># To search a file for a pattern:</span>
<span class="nb">grep</span> &lt;pattern&gt; &lt;file&gt;

<span class="c"># To perform a case-insensitive search (with line numbers):</span>
<span class="nb">grep</span> <span class="nt">-in</span> &lt;pattern&gt; &lt;file&gt;

<span class="c"># To recursively grep for string &lt;pattern&gt; in &lt;dir&gt;:</span>
<span class="nb">grep</span> <span class="nt">-R</span> &lt;pattern&gt; &lt;<span class="nb">dir</span><span class="o">&gt;</span>

<span class="c"># Read search patterns from a file (one per line):</span>
<span class="nb">grep</span> <span class="nt">-f</span> &lt;pattern-file&gt; &lt;file&gt;

<span class="c"># Find lines NOT containing pattern:</span>
<span class="nb">grep</span> <span class="nt">-v</span> &lt;pattern&gt; &lt;file&gt;

<span class="c"># Set how many lines to show before (-B) and after (-A) pattern:</span>
<span class="nb">grep</span> <span class="nt">-B</span> 3 <span class="nt">-A</span> 2 &lt;pattern&gt; &lt;file&gt;

<span class="c"># To grep with regular expressions:</span>
<span class="nb">grep</span> <span class="s2">"^00"</span> &lt;file&gt;                                               <span class="c"># Match lines starting with 00</span>
<span class="nb">grep</span> <span class="nt">-E</span> <span class="s2">"[0-9]{1,3}</span><span class="se">\.</span><span class="s2">[0-9]{1,3}</span><span class="se">\.</span><span class="s2">[0-9]{1,3}</span><span class="se">\.</span><span class="s2">[0-9]{1,3}"</span> &lt;file&gt; <span class="c"># Find IP add</span>

<span class="c"># To find all files that match &lt;pattern&gt; in &lt;dir&gt;</span>
<span class="nb">grep</span> <span class="nt">-rnw</span> &lt;<span class="nb">dir</span><span class="o">&gt;</span> <span class="nt">-e</span> &lt;pattern&gt;

<span class="c"># To exclude grep from your grepped output of ps:</span>
<span class="c"># (Add [] to the first letter. Ex: sshd -&gt; [s]shd)</span>
ps aux | <span class="nb">grep</span> <span class="s1">'[h]ttpd'</span>

<span class="c"># Colour in red {bash} and keep all other lines</span>
ps aux | <span class="nb">grep</span> <span class="nt">-E</span> <span class="nt">--color</span> <span class="s1">'bash|$'</span>

<span class="c"># (...)</span>
</code></pre></div></div> <p>The cheat sheet only lists the most common commands and doesn’t overwhelm the user with every single available option and flag. For our example, the fifth line from the above excerpt of the <code class="language-plaintext highlighter-rouge">grep</code> cheat sheet tells us that the <code class="language-plaintext highlighter-rouge">-v</code> flag is what we are looking for.</p> <blockquote> <p>Note that, while I mostly use <code class="language-plaintext highlighter-rouge">cht.sh</code> for quickly finding flags of CLI tools, this is only scratching the surface of what this resource has to offer. For instance, it has an extensive interface for learning programming languages, which can be quite useful. I encourage the interested reader to consult the <code class="language-plaintext highlighter-rouge">cht.sh</code> <a href="https://github.com/chubin/cheat.sh?tab=readme-ov-file">documentation</a> for further use cases.</p> </blockquote> <h1 id="combining-it-with-fzf">Combining it with <code class="language-plaintext highlighter-rouge">fzf</code></h1> <p>What would be quite neat is to be able to explore the available cheat sheets and dynamically select the desired one and preview it. For this purpose, I wrote a short script to combine the results from <code class="language-plaintext highlighter-rouge">cht.sh</code> with the popular <a href="https://github.com/junegunn/fzf">fzf</a> fuzzy finder command line tool.</p> <figure> <video src="/assets/video/blog/chtsh-demo.mp4" class="img-fluid rounded z-depth-1" width="auto" height="auto" autoplay="" controls="" loop="" muted=""/> <figcaption class="caption">Demo of cht.sh combined with fzf.</figcaption> </figure> <p>First, to obtain all available cheat sheets hosted on <code class="language-plaintext highlighter-rouge">cht.sh</code>, we can use the <code class="language-plaintext highlighter-rouge">:list</code> query. This returns a list of all available cheat sheets, which can then be piped to <code class="language-plaintext highlighter-rouge">fzf</code> in order to fuzzy search through the results. The currently selected item’s cheat sheet may be queried from <code class="language-plaintext highlighter-rouge">cht.sh</code> and displayed in <code class="language-plaintext highlighter-rouge">fzf</code>’s preview window.</p> <p>All this can be simply achieved using a short command which I aliased to <code class="language-plaintext highlighter-rouge">chtsh</code> for convenience:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">alias </span><span class="nv">chtsh</span><span class="o">=</span><span class="s2">"curl -s cht.sh/:list | fzf --preview 'curl -s cht.sh/{}'"</span>
</code></pre></div></div> <p>Note that the <code class="language-plaintext highlighter-rouge">-s</code> silences the progress bar of the <code class="language-plaintext highlighter-rouge">curl</code> command such that it is not overlaid on top of the <code class="language-plaintext highlighter-rouge">fzf</code> window. As shown in the above demo, the preview window maintains the syntax highlighting from the <code class="language-plaintext highlighter-rouge">curl</code> command and is fully scrollable.</p> <h1 id="fzf-configuration"><code class="language-plaintext highlighter-rouge">fzf</code> configuration</h1> <p><code class="language-plaintext highlighter-rouge">fzf</code> has a number of customization options that can be used to tweak its appearance and workflow to your liking. These configurations can be either passed as flags to the <code class="language-plaintext highlighter-rouge">fzf</code> command or set globally in the environment variable <code class="language-plaintext highlighter-rouge">FZF_DEFAULT_OPTS</code>. I use this variable to configure the location and size of the preview window as well as enable vim keybindings for scrolling the preview window (e.g., <code class="language-plaintext highlighter-rouge">&lt;C-u&gt;</code>: up, <code class="language-plaintext highlighter-rouge">&lt;C-d&gt;</code>: down):</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">FZF_DEFAULT_OPTS</span><span class="o">=</span><span class="s2">"--preview-window=right,80%:wrap </span><span class="se">\</span><span class="s2">
     --bind ctrl-y:preview-up,ctrl-e:preview-down, ctrl-u:preview-half-page-up,ctrl-d:preview-half-page-down"</span>
</code></pre></div></div> <h1 id="source">Source</h1> <p>This inspiration for this post comes from a great YouTube <a href="https://www.youtube.com/watch?v=hJzqEAf2U4I">video</a> by ThePrimeagen, which also introduced me to the <code class="language-plaintext highlighter-rouge">cht.sh</code> resource. In the video, he develops a short script which combines <code class="language-plaintext highlighter-rouge">cht.sh</code> and <code class="language-plaintext highlighter-rouge">fzf</code> with <code class="language-plaintext highlighter-rouge">tmux</code>. Actually, if you are an avid <code class="language-plaintext highlighter-rouge">tmux</code> user, his scripts can be adapted to my command for a truly smooth experience using the <code class="language-plaintext highlighter-rouge">cht.sh</code> facilities.</p>]]></content><author><name></name></author><category term="productivity"/><summary type="html"><![CDATA[The online ressource for quickly getting information on programming languages and command line tools]]></summary></entry><entry><title type="html">DuckDuckGo Bangs</title><link href="https://kszenes.github.io/blog/2024/DuckDuckGoBangs/" rel="alternate" type="text/html" title="DuckDuckGo Bangs"/><published>2024-09-23T00:00:00+00:00</published><updated>2024-09-23T00:00:00+00:00</updated><id>https://kszenes.github.io/blog/2024/DuckDuckGoBangs</id><content type="html" xml:base="https://kszenes.github.io/blog/2024/DuckDuckGoBangs/"><![CDATA[<h1 id="introduction">Introduction</h1> <p>Nowadays, most of the time when I use a search engine, I usually know on which website I want to arrive at, but I don’t know the exact URL. For instance, if I want to learn more about the 17th century Dutch Tulip Mania, I would usually start by checking out its Wikipedia page. Indeed, I would use “tulip mania wiki” as my search query and click on the first link (corresponding to the Wikipedia page). This process is pretty annoying, especially now that one needs to click through all the cookie menus when using Google as the search engine.</p> <h1 id="solution">Solution</h1> <figure> <video src="/assets/video/blog/ddg-bangs.mp4" class="img-fluid rounded z-depth-1" width="auto" height="auto" autoplay="" controls="" loop="" muted=""/> <figcaption class="caption">Example use cases of DuckDuckGo Bangs.</figcaption> </figure> <p>Since this is how I use search engines 99% of the time, wouldn’t it be nice if I could directly search the website, for instance Wikipedia, for the query, in this case “tulip mania”? One of the coolest native features of <a href="https://duckduckgo.com/">DuckDuckGo</a>, a privacy-centric search engine, which is lesser known (at least it was to me) is called DuckDuckGo bangs which enables precisely this. By starting a search query with a bang (an exclamation point) followed by a character code, corresponding to the website, and then the search query, DuckDuckGo directly issues the query to the website of interest and the user is immediately redirected to the page they were looking for. In our previous example, one would need to use the character code <code class="language-plaintext highlighter-rouge">w</code> corresponding to Wikipedia:</p> <div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>!w tulip mania
</code></pre></div></div> <h2 id="available-bangs">Available Bangs</h2> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blog/ddg-bangs.png" sizes="95vw"/> <img src="/assets/img/blog/ddg-bangs.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>DuckDuckGo Bangs supports a huge number of websites (13’567 as of the time of writing this blog post) containing all the major websites as well as many lesser known ones. The list of available bangs can be viewed on their <a href="https://duckduckgo.com/bangs">website</a>, and you can even make a suggestion for websites that have not been cataloged yet. Furthermore, if you simply use a bang followed by your search query without any character code, DuckDuckGo redirects you to the first search result (reminiscent of the “I’m feeling lucky” feature of Google). I use this all the time for lesser known websites that do not have their dedicated bang. In addition, this feature can be used when a bang opens up the search results page of the target website (instead of the closest match) to directly jump to the desired page (as in the case of Google Scholar in the last example form the video above).</p> <h3 id="most-used-bangs">Most used bangs</h3> <p>Here are a some of my most used bangs:</p> <table> <thead> <tr> <th>Bang</th> <th>Website</th> </tr> </thead> <tbody> <tr> <td><code class="language-plaintext highlighter-rouge">!</code></td> <td>I’m feeling lucky</td> </tr> <tr> <td><code class="language-plaintext highlighter-rouge">!w</code></td> <td>Wikipedia</td> </tr> <tr> <td><code class="language-plaintext highlighter-rouge">!gsc</code></td> <td>Google Scholar</td> </tr> <tr> <td><code class="language-plaintext highlighter-rouge">!gh</code></td> <td>GitHub</td> </tr> <tr> <td><code class="language-plaintext highlighter-rouge">!cpp</code></td> <td>Cpp Reference</td> </tr> <tr> <td><code class="language-plaintext highlighter-rouge">!pypi</code></td> <td>PyPi</td> </tr> <tr> <td><code class="language-plaintext highlighter-rouge">!g</code></td> <td>Google</td> </tr> </tbody> </table> <h2 id="compatibility-with-other-search-engines">Compatibility with other search engines</h2> <p>Now you might say, this looks cool and all but I don’t want to switch my entire search engine to DuckDuckGo because the search results are not as good as the ones from Google, with which I would totally agree. Personally, I prefer using a search engine called <a href="https://www.startpage.com/">StartPage</a> which fetches results from Google without tracking everything you do on the internet. Does this mean that you cannot benefit from this cool feature? Far from it. There are a number of plugins for Firefox and Chromium-based web browser plugins which augment your search bar with this feature while still relying on your search engine of choice for default queries. The plugin that I am currently using is <a href="https://addons.mozilla.org/en-US/firefox/addon/banger/">Banger</a> for Firefox, with which I am quite happy. However, there are a number of alternatives that are available by simply searching for “bangs” in the respective browser’s extension store.</p> <h3 id="mobile">Mobile</h3> <p>On mobile, I use the <a href="https://addons.mozilla.org/en-US/firefox/addon/yang-addon/">Yang! Yet Another Bangs</a> extension for the android Firefox app.</p>]]></content><author><name></name></author><category term="productivity"/><summary type="html"><![CDATA[DuckDuckGo's hidden feature which will turbo-charge your web searching]]></summary></entry></feed>